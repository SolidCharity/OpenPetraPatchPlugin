--- openpetraNow.PatchRemoting/csharp/ICT/BuildTools/CodeGeneration/DataBinding.cs	2014-05-16 08:52:04.000000000 +0200
+++ openpetraNow.PatchPlugin/csharp/ICT/BuildTools/CodeGeneration/DataBinding.cs	2014-05-16 11:34:44.000000000 +0200
@@ -57,7 +57,8 @@
         /// <summary>
         /// load the dataset tables
         /// </summary>
-        public static SortedList <string, TTable>LoadDatasetTables(string AICTPath, string ADataSetTypeWithNamespace, TCodeStorage ACodeStorage)
+        public static SortedList <string, TTable>LoadDatasetTables(string AICTPath, string ADataSetTypeWithNamespace, TCodeStorage ACodeStorage,
+            string APluginPath)
         {
             if (FDatasetTables == null)
             {
@@ -66,9 +67,9 @@
 
             FCodeStorage = ACodeStorage;
 
-            if (!ADataSetTypeWithNamespace.StartsWith("Ict.Petra.Shared"))
+            if (!ADataSetTypeWithNamespace.StartsWith("Ict.Petra.Shared") && !ADataSetTypeWithNamespace.StartsWith("Ict.Petra.Plugins"))
             {
-                throw new Exception("the DatasetType must contain the full namespace, starting with Ict.Petra.Shared");
+                throw new Exception("the DatasetType must contain the full namespace, starting with Ict.Petra.Shared or Ict.Petra.Plugins");
             }
 
             if (FDatasetTables.ContainsKey(ADataSetTypeWithNamespace))
@@ -86,6 +87,14 @@
             // look in Ict/Petra/Shared/lib/MODULE/data
             string dataPath = AICTPath + "/Petra/Shared/lib/" + module + "/data/";
 
+            if (ADataSetTypeWithNamespace.StartsWith("Ict.Petra.Plugins"))
+            {
+                int start = "Ict.Petra.Plugins.".Length;
+                int end = ADataSetTypeWithNamespace.IndexOf(".", start);
+                string PluginName = ADataSetTypeWithNamespace.Substring(start, end - start);
+                dataPath = AICTPath + "/Petra/Plugins/" + PluginName + "/data/";
+            }
+
             DirectoryInfo directory = new DirectoryInfo(dataPath);
             FileInfo[] xmlFiles = directory.GetFiles("*.xml");
             XmlNode datasetNode = null;
@@ -99,6 +108,13 @@
                 }
             }
 
+            if ((datasetNode == null) && File.Exists(APluginPath))
+            {
+                // also check the plugin directory of the yaml file, for plugins can have a file TypedDataSets.xml
+                TXMLParser parser = new TXMLParser(APluginPath, false);
+                datasetNode = parser.GetDocument().SelectSingleNode(String.Format("//DataSet[@name='{0}']", datasetName));
+            }
+
             if (datasetNode == null)
             {
                 throw new Exception("cannot find the xml file for dataset " + ADataSetTypeWithNamespace);
